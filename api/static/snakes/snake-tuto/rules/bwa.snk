def get_data(w):
    path = os.path.join(config['input_folder'], "fastq", w.sample)
    return f"{path}.fastq"


rule bwa_map:
    input:
        reads = get_data
    output:
        temp("mapped_reads/{sample}.bam")
    threads: 3
    benchmark:
        "benchmarks/{sample}.bwa.benchmark.txt"
    log:
        "logs/bwa_mem/{sample}.log"
    params:
        index = ref_gen,
        extra = r"-R '@RG\tID:{sample}\tSM:{sample}'",
        sort = 'samtools',
        sort_order = 'coordinate',
        sort_extra=""
    conda:
        "../envs/bwa_samtools.yaml"
    wrapper:
        "0.31.1/bio/bwa/mem"

rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    conda:
        "../envs/bwa_samtools.yaml"
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} -O bam {input} > {output}"

rule samtools_index:
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    conda:
        "../envs/samtools.yaml"
    shell:
        "samtools index {input}"
